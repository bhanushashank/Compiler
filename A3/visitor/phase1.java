//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class phase1<R,A> implements GJVisitor<R,A> {

        int[] countsignatures = {0,0,0,0,0,0,0,0,0,0,0,0};

        public class newTable{
      
              String checker = "";

              HashMap<Integer,HashMap<String,Integer>> functionInfo;

              newTable(){
                 functionInfo = new HashMap<Integer,HashMap<String,Integer>>();
                 functionInfo.put(0,new HashMap<String,Integer>());
                 functionInfo.put(1,new HashMap<String,Integer>());
                 functionInfo.put(2,new HashMap<String,Integer>());
              }
        };

        void createTypes(){
               TypesStore.put(0,"int[]");
               TypesStore.put(1,"boolean");
               TypesStore.put(2,"int");
         }


        

        String IdentityVariable = "";
        String typeVariable = ""; 

         HashMap<Integer,String> TypesStore = new HashMap<Integer,String> (); 

        public class Table{

            HashMap<Integer,HashMap<String,Table>> methodInfo;
            String parent;

            HashMap<String,LinkedList<R> > structureOfFunctions;
            HashMap<String,Integer> ClassDeclarationreference;

            Table(){
              methodInfo = new HashMap<Integer,HashMap<String,Table>>();
              methodInfo.put(0,new HashMap<String,Table>());
                            variablesInfo = new HashMap<String,String>();
                            parent=null;
              structureOfFunctions=new HashMap<String,LinkedList<R> >();
              ClassDeclarationreference = new HashMap<String,Integer> ();
            }

            HashMap<String,String> variablesInfo;
        };


        HashMap<String,Integer> record = new HashMap<String,Integer> ();
        HashMap<String,String> recordTypes = new HashMap<String,String> ();       
        
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   MemoryData answer = new MemoryData();

   //
   // User-generated visitor methods below
   //

   public class MemoryData{
           HashMap <String,Table> SymbolTable;
           HashMap < String,newTable> SymbolTableForMemory;

           MemoryData(){
             SymbolTable = new HashMap<String,Table> ();
             SymbolTableForMemory = new HashMap<String,newTable> ();
           }
        };

   
  int FindingMethod(String[] a,newTable x){
        if(a[0]==null){
            return -1;
         }
        Table t=answer.SymbolTable.get(a[0]);
        if(t.methodInfo.get(0).get(a[1])==null){
            String[] thop = new String[2];
            thop[0] = t.parent;
            thop[1] = a[1];
            return FindingMethod(thop,x);
        }
        else{
            String thop = a[0]+"_"+a[1];
            int temp =x.functionInfo.get(1).get(thop);
            x.functionInfo.get(1).remove(thop);
            return temp;
        }
   }

   MemoryData finalAnswer(){
      Iterator<String> it = answer.SymbolTable.keySet().iterator();
         while(it.hasNext()){
             String a = it.next();
             newTable x = new newTable();
             noVariablesLeft(a,x);
             answer.SymbolTableForMemory.put(a,x);
         }

      return answer;
   }

   void checking(){
            Iterator<String> it = answer.SymbolTable.keySet().iterator();
            while(it.hasNext()){
               System.out.println(it.next());
            }
   }

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {

      n.f0.accept(this, argu);
      R _ret=null;
 
      countsignatures[0] = 1;
      record.put("Main",1);

      n.f1.accept(this, argu);
 
      if(countsignatures[0]==0){
         //System.out.println("error");
      }

      n.f2.accept(this, argu);

      if(countsignatures[0]==1){
         record.put("Main",0);
      }
   
      return (R)finalAnswer();
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
 
      countsignatures[0] = 1;
      createTypes();

       R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Table a = new Table();    
      answer.SymbolTable.put(IdentityVariable,a);

      if(record.get("Main")!=null){
         countsignatures[1]++;
         argu=(A)a;
      }
      else{
         argu=(A)a;
         record.put("Main",-1);
      }

      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);


      n.f11.accept(this, argu);
      LinkedList<R> f = new LinkedList<R>();
 
      String s = "String[]";

      f.addFirst((R)s);
      f.addFirst((R)("void"));
      a.structureOfFunctions.put("main",f);
      String id = IdentityVariable;
      
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);

      record.put(s,6);

      Table b = new Table();
      b.variablesInfo.put(id,s);
      record.put("void",1);
      a.methodInfo.get(0).put("main",b);
      
      return _ret;
   }

   void variablemap(newTable x,String a){
       Table old = answer.SymbolTable.get(a);
       int i= (x.functionInfo.get(0).size()+1)*4;
       Iterator<String> it = old.variablesInfo.keySet().iterator();
       while(it.hasNext()){
          String v = it.next();
          x.functionInfo.get(0).put(a+"_"+v,i);
          i += 4;
       }
   }

   


   void noVariablesLeft(String a, newTable x){


           if(answer.SymbolTable.get(a).parent!=null){
               noVariablesLeft(answer.SymbolTable.get(a).parent,x);
           } 

           variablemap(x,a);

           functionmap(x,a);
   }
        

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }


   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {

      Table a = new Table();
      R _ret=null;
      n.f0.accept(this, (A)a);
      n.f1.accept(this, (A)a);

      answer.SymbolTable.put(IdentityVariable,a);
      recordTypes.put(IdentityVariable,typeVariable);

      countsignatures[3]++;

      n.f2.accept(this, (A)a);
      n.f3.accept(this, (A)a);
      n.f4.accept(this, (A)a);
      n.f5.accept(this, (A)a);

      record.put(IdentityVariable,countsignatures[2]);

      return _ret;
   }


   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {

      Table a = new Table();
      R _ret=null;
      n.f0.accept(this, (A)a);
      n.f1.accept(this, (A)a);
      answer.SymbolTable.put(IdentityVariable,a);
      recordTypes.put(IdentityVariable,typeVariable);
      n.f2.accept(this, (A)a);

      n.f3.accept(this, (A)a);
      a.parent = IdentityVariable;
      recordTypes.put(IdentityVariable,typeVariable);
      countsignatures[4]++;

      n.f4.accept(this, (A)a);
      n.f5.accept(this, (A)a);
      n.f6.accept(this, (A)a);
      n.f7.accept(this, (A)a);
      
      record.put(IdentityVariable,countsignatures[4]); 
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      ((Table)argu).variablesInfo.put(IdentityVariable,typeVariable);
      return _ret;
   }

   /**
    * f0 -> AccessType()
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */

   public R visit(MethodDeclaration n, A argu) {

      R _ret=null;
      Table b = new Table();
 
      Iterator<String> it = answer.SymbolTable.keySet().iterator();

      while(it.hasNext()){
         String a = it.next();
         if(answer.SymbolTable.get(a)==(Table)argu){
                     b.parent = a;
                     break;
          }
      }

      n.f0.accept(this, (A)b);
      n.f1.accept(this,argu);
      String ret = typeVariable;
      n.f2.accept(this,argu);
      n.f3.accept(this, (A)b);
      String Methodname = IdentityVariable;

      LinkedList<R> temp = (LinkedList<R>)n.f4.accept(this, (A)b);
      if(temp ==null){
        temp = new LinkedList<R>();
      }

      temp.addFirst((R)ret);
      ((Table)argu).structureOfFunctions.put(Methodname,temp);
      ((Table)argu).methodInfo.get(0).put(Methodname,b);

      n.f5.accept(this, (A)b);
      n.f6.accept(this, (A)b);
      n.f7.accept(this, (A)b);
      n.f8.accept(this, (A)b);
      n.f9.accept(this, (A)b);
      n.f10.accept(this, (A)b);
      n.f11.accept(this, (A)b);
      n.f12.accept(this, (A)b);
      return _ret;
   }

   void functionmap(newTable x,String a){
        Table old = answer.SymbolTable.get(a);
        Iterator<String> it = old.methodInfo.get(0).keySet().iterator();        
        int i= x.functionInfo.get(1).size()*4;
 
        while(it.hasNext()){
           String m = it.next();
           String[] thop = new String[2];
           thop[0] = old.parent;
           thop[1] = m;
           int t = FindingMethod(thop,x);
            if(t==-1){
                x.functionInfo.get(1).put(a+"_"+m,i);
                i+=4;
            }
            else{
                x.functionInfo.get(1).put(a+"_"+m,t);
            }
        }
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {

       R _ret=null;
      String pro = (String)n.f0.accept(this,argu);

      LinkedList<R> temp = (LinkedList<R>)n.f1.accept(this,argu);
      
      
      if (pro == null){
          return _ret;
       }

       if (temp==null) {
          temp = new LinkedList<R>();
          temp.addFirst((R)pro);
       }
       else{
         temp.addFirst((R)pro);
       }

      return (R)temp;
      
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */

   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this,argu);
      n.f1.accept(this,argu);
      ((Table)argu).variablesInfo.put(IdentityVariable,typeVariable);
      return (R)typeVariable;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return n.f1.accept(this,argu);
   }


   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;

      String pro = (String)n.f0.accept(this,argu);

      if(n.f0.which==3){
         typeVariable = pro;
         return (R)pro;
      }
      else{
         typeVariable = TypesStore.get(n.f0.which);
      }

      return (R)typeVariable;
   }


   /**
    * f0 -> PublicType()
    *       | PrivateType()
    *       | ProtectedType()
    */
   public R visit(AccessType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    */
   public R visit(PublicType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "private"
    */
   public R visit(PrivateType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "protected"
    */
   public R visit(ProtectedType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | TernaryExpression()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "?"
    * f2 -> PrimaryExpression()
    * f3 -> ":"
    * f4 -> PrimaryExpression()
    */
   public R visit(TernaryExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      countsignatures[2]++;
      R _ret=null;
      n.f0.accept(this, argu);
      IdentityVariable = n.f0.toString();
      String convertstring = n.f0.toString();
      record.put(convertstring,countsignatures[2]);
      return (R) convertstring;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
