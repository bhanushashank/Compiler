//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst3<R,A> extends GJDepthFirst2<R,A> {

   String anstoprint = "";
   String printRegisters = "";
   int[] globalVariable = new int[5];
   int[] c = new int[5];

   HashMap<String,Integer> allocationRegistersForSpill = new HashMap<String,Integer>();
   HashMap<String,HashMap<Integer, RegisterAllocation> > forRegisters = new HashMap<String,HashMap<Integer, RegisterAllocation> >();
   HashMap<String,Integer> argumentsCount = new HashMap<String,Integer>();
   HashMap<String,HashMap<Integer, RegisterAllocation> > registermapping = new HashMap<String,HashMap<Integer, RegisterAllocation> >();


   void LoadCFG(CFG programGrammar){

      forRegisters = programGrammar.registermapping;
      argumentsCount = programGrammar.functionInfo.get(0);
      registermapping = programGrammar.registermapping;
      allocationRegistersForSpill = programGrammar.functionInfo.get(2);

   }

   //
   // Auto class visitors--probably don't need to be overridden.
   //

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         LinkedList<R> l = new LinkedList<R>();
               for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
                  l.add(e.nextElement().accept(this,argu));
                  _count++;
               }
               return (R) l;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() ){
         String temp=(String) n.node.accept(this,argu);
         anstoprint += temp+"\n";
         return (R)temp;
      }
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   int basicBlockCount;
   String CurrentRunningName;

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret = null;

      LoadCFG((CFG)argu);

      n.f0.accept(this, argu);

      CurrentRunningName = "MAIN";

      int secondans = 2;
      secondans += allocationRegistersForSpill.get(CurrentRunningName);
      secondans += argumentsCount.get(CurrentRunningName);
  
      int thirdans = argumentsCount.get(CurrentRunningName);

      anstoprint += "MAIN [0] [";
      anstoprint += (secondans)+"] [";
      anstoprint += thirdans+"]\n";

      basicBlockCount = 0;

      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      anstoprint += "END\n";

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      System.out.println(anstoprint);

      CFG temp = (CFG)(argu);

      if(temp.SpillCount == 0){
         System.out.println("//Not spilled");
      }
      else{
         System.out.println("//Spilled");
      }

      return (R)labelInstruction;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;

      basicBlockCount++;

      CurrentRunningName = (String) n.f0.accept(this, argu);

      printRegisters += CurrentRunningName;

      n.f1.accept(this, argu);

      String cry1 = (String)n.f2.accept(this, argu);
      int parametersCount = Integer.parseInt(cry1);

      int secondans = 2;
      secondans += allocationRegistersForSpill.get(CurrentRunningName);
      secondans += argumentsCount.get(CurrentRunningName);
  
      int thirdans = argumentsCount.get(CurrentRunningName);

      anstoprint += CurrentRunningName +" ["+parametersCount+"] [";
      anstoprint += (secondans);
      anstoprint += "] ["+thirdans+"]\n";

      int stackparameters = 0;

      if(parametersCount > 4){
        stackparameters = parametersCount - 4;
      }
      //Storing temporarily

      int k = 0;

      while(k<10){
         anstoprint += "ASTORE SPILLEDARG ";
         anstoprint += (k+stackparameters)+" t"+k+"\n";
         k++;
      }

      k = 0;

      while(k<8){
         anstoprint += "ASTORE SPILLEDARG ";
         anstoprint += (k+stackparameters+10)+" s"+k+"\n";
         k++;
      }

      k = 0;

      while(k<4 && k<parametersCount){
         anstoprint += "MOVE s"+k+" a"+k+"\n";
         k++;
      }

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      //Storing back

      k = 0;

      while(k<10){
         anstoprint +=  "ALOAD t"+k;
         anstoprint += " SPILLEDARG "+(k+stackparameters)+"\n";
         k++;
      }
      
      k = 0;

      while(k<8){
          anstoprint += "ALOAD s"+k;
          anstoprint += " SPILLEDARG "+(k+stackparameters+10)+"\n";
          k++;
      }

      anstoprint += " END\n";
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      basicBlockCount++;
      RegisterAllocation temp = forRegisters.get(CurrentRunningName).get(2);
      
      printRegisters += "MOVE r"+2;

      temp = forRegisters.get(CurrentRunningName).get(4);
      printRegisters += " r4";

      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      anstoprint += "NOOP\n";
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      anstoprint += "ERROR\n";
      return _ret;
   }

   
   String AssignAllocatedRegister(int tempNumber,int indexOfregister){

      globalVariable[0] = 0;
      globalVariable[1] = -1;
      c[0] = globalVariable[2];
      c[1] = c[2];

      RegisterAllocation b = registermapping.get(CurrentRunningName).get(tempNumber);

      if(b.registerLock){
         return b.GeneralRegister;
      }

      globalVariable[1] = b.StackRegister;
      globalVariable[0] = 1;

      c[1] = 0;
      c[0] = globalVariable[2];

      if(indexOfregister != -1){
         anstoprint += "ALOAD v"+indexOfregister;
         anstoprint += " SPILLEDARG "+b.StackRegister+"\n";
      }

      String ans = "v"+indexOfregister;
      return ans;  
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String pro1 = (String)n.f1.accept(this, argu);
      String pro2 = (String)n.f2.accept(this, argu);

      String ans = AssignAllocatedRegister(Integer.parseInt(pro1),1);

      anstoprint += " CJUMP "+ans;
      anstoprint += " "+pro2+"\n";
  
      printRegisters += ans;

      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
     R _ret=null;
      n.f0.accept(this, argu);
      String ans = (String)n.f1.accept(this, argu);

      anstoprint += " JUMP ";
      anstoprint += ans+"\n";

      printRegisters += " JUMP ";
      printRegisters += "L"+c[1];

      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      String cry1 = (String)n.f1.accept(this, argu);
      Integer pro1 = Integer.parseInt(cry1);
      
      String offset = (String)n.f2.accept(this, argu);

      String cry2 = (String)n.f3.accept(this, argu);
      Integer pro2 = Integer.parseInt(cry2);

      String ans1 = AssignAllocatedRegister(pro1,0);
      String ans2 = AssignAllocatedRegister(pro2, 1);

      anstoprint += " HSTORE "+ans1+" "+offset+" ";
      anstoprint += ans2 +"\n";

      c[2] = globalVariable[1];
      c[1] = globalVariable[0];

      if(globalVariable[2]==0){
         printRegisters += " HSTORE "+ans2+" "+offset+" ";
         printRegisters += ans1;
      }

      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      String cry1 = (String)n.f1.accept(this, argu);
      Integer pro1 = Integer.parseInt(cry1);

      String cry2 = (String)n.f2.accept(this, argu);
      Integer pro2 = Integer.parseInt(cry2);

      String offset = (String)n.f3.accept(this, argu);

      String ans1 = AssignAllocatedRegister(pro1,0);

      int temp1 = globalVariable[0];
      int temp2 = globalVariable[1];

      String ans2 = AssignAllocatedRegister(pro2, 1);


      anstoprint += " HLOAD "+ans1+" "+ans2;
      anstoprint += " "+offset+"\n";

      if(temp1==1){
         anstoprint += " ASTORE SPILLEDARG ";
         anstoprint += temp2+" "+ans1+"\n";
      }
      else{
         printRegisters +=  " HLOAD "+ans1+" "+temp2;
         printRegisters += ans2;
      }
     
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      if(c[2]==1){
         printRegisters += "MOVE r2"+" "+1;
      }

      String pro = (String)n.f1.accept(this, argu);
      Integer ans = Integer.parseInt(pro);
      argu = (A)ans;
 
      printRegisters += "MOVE r2"+" "+ans;

      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String ans = (String)n.f1.accept(this, argu);
      anstoprint += "PRINT ";
      anstoprint += ans+"\n";
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);

       if(n.f0.which==0){
         
          String pro = AssignAllocatedRegister((Integer)argu,-1);

          int temp1 = globalVariable[0];
          int temp2 = globalVariable[1];

          if(temp1!=1){
             anstoprint += " MOVE "+pro+" v0\n";  
          }
          else{
             anstoprint += " ASTORE SPILLEDARG ";
             anstoprint += temp2 +" v0\n";
          }
      }
      else if(n.f0.which==1){

        String cry = (String)_ret;

        if(c[2]==0){
          printRegisters += " MOVE v1 v0\n ";
          printRegisters += c[1];
        }

        String pro = AssignAllocatedRegister((Integer)argu,0);

        int temp1 = globalVariable[0];
        int temp2 = globalVariable[1];

        anstoprint += " MOVE "+pro;
        anstoprint += " HALLOCATE "+cry+"\n";

        if(temp1==1){
           anstoprint += " ASTORE SPILLEDARG ";
           anstoprint += temp2+ " "+pro+"\n";
        }
        else{
          printRegisters += " ASTORE SPILLEDARG ";
          printRegisters += pro+ " "+cry+"\n";
        }
      }
      else if(n.f0.which==3){
          String cry = (String)_ret;
             
           if(c[2]==0){
              printRegisters += " MOVE s2 v0\n ";
               printRegisters += c[1];
          }
          String pro = AssignAllocatedRegister((Integer)argu,-1);
          int temp1 = globalVariable[0];
          int temp2 = globalVariable[1];

          if(temp1!=1){
              anstoprint += "MOVE "+pro+" "+cry+"\n";   
          }
          else{
              anstoprint += "ASTORE SPILLEDARG ";
              anstoprint += temp2+" "+cry+"\n";
          }
      }
      
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      basicBlockCount++;

      if(globalVariable[0] == 0){
         printRegisters += "MOVE v0";
         printRegisters += basicBlockCount;
      }

      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      String ans = (String)n.f3.accept(this, argu);

      anstoprint += " MOVE v0 ";
      anstoprint += ans+"\n";


      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      String ans = (String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      LinkedList<R> temp = (LinkedList)n.f3.accept(this, argu); 

      if(temp != null){
           Iterator<R> it = temp.iterator();
           String pro;
           int parametersCount=0;
           while(it.hasNext()){

               if(c[1]==0){
                      printRegisters += " MOVE a"+c[2] + "v0\n";
                      printRegisters += parametersCount;
               }

               pro = AssignAllocatedRegister(Integer.parseInt((String)it.next()),0);
               if(parametersCount>=4){
                  anstoprint += " PASSARG ";
                  anstoprint += (parametersCount-3)+" "+pro+"\n";
               }
               else{ 
                  anstoprint += " MOVE a"+parametersCount+" ";
                  anstoprint += pro+"\n";
               }
               parametersCount++;
            }
      }
      anstoprint += " CALL ";
      anstoprint += ans+"\n";

      n.f4.accept(this, argu);

      if(c[3]==0){
           printRegisters += " MOVE a"+c[2]+ "v0\n";
      }
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      if(globalVariable[0] == 0){
         printRegisters += "HALLOCATE "+c[0]+" "+c[2];
      } 
      else{
         printRegisters += "HALLOCATE "+c[1]+" "+c[2];
      }

      _ret=n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;

      String operation = (String)n.f0.accept(this, argu);
      String temp = (String)n.f1.accept(this, argu);
      
      String s=(String)n.f2.accept(this, argu);

      String pro = AssignAllocatedRegister(Integer.parseInt(temp),0);

      String cry = AssignAllocatedRegister((Integer)argu,-1);

      int temp1 = globalVariable[0];
      int temp2 = globalVariable[1];

      if(temp1==1){
         anstoprint += " MOVE v0 ";
         anstoprint += operation+" "+pro+" "+s+"\n";
         anstoprint += " ASTORE SPILLEDARG ";
         anstoprint += temp2+" v0\n";
      }
      else{
         anstoprint += " MOVE "+cry+" ";
         anstoprint += operation+" "+pro+" "+s+"\n";
      }

      c[0] = globalVariable[1];
      c[1] = 2;

      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      String ans = "";
      n.f0.accept(this, argu);

      if(n.f0.which==0){
         ans = " LE ";
      }
      else if(n.f0.which==1){
         ans = " NE ";
      }
      else if(n.f0.which==2){
         ans = " PLUS ";
      }
      else if(n.f0.which==3){
         ans = " MINUS ";
      }
      else if(n.f0.which==4){
         ans = " TIMES ";
      }
      else if (n.f0.which==5){
         ans = " DIV ";
      }
      
      return (R)ans;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
       R _ret=null;
      _ret=n.f0.accept(this, argu);

      if(globalVariable[0] == 0 && c[0]==1){
         printRegisters += "MOVE v1";
         printRegisters += c[0];
      }

      if(n.f0.which==0){
        return (R)AssignAllocatedRegister(Integer.parseInt((String)_ret),1);
      }
      else if(n.f0.which==1){
         anstoprint += " MOVE v1 ";
         anstoprint += (String)_ret+"\n";
         return (R)"v1";
      }
      else{
         printRegisters += "MOVE v1";
         printRegisters += c[1];
      }

      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)n.f0.toString();
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) n.f0.toString();
   }

}
