//
// Generated by JTB 1.3.2
//


//  Name :- T.Bhanu Shashank(CS19B043).
//  FileType: - TypeChckingPhase.

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class TypeCheckingPhase<R,A> extends GJDepthFirst<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         LinkedList<R> temp = new LinkedList<R>();
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            temp.add(e.nextElement().accept(this,argu));
            _count++;
         }
         return (R)temp;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   public String returnTypeOfFunction(String functionName,LinkedList<R> arguments,SymbolTable tmp,String scope)
    {

       if(tmp==null)
       {
           System.out.println("Type error");
           System.exit(0);
       }

       if(tmp.Functions.get(functionName)==null)
       {
           if(tmp.parent==null)
           {
                System.out.println("Type error");
                System.exit(0);
           }
           else{
              return returnTypeOfFunction(functionName,arguments,GlobalSymbolTable.get(tmp.parent),tmp.parent);
           }
       }

       
      checkAccessType(tmp,scope,functionName);


      LinkedList<R> argumentsList=tmp.Functions.get(functionName);
      int len=argumentsList.size();

      if(arguments==null)
      {
         if(len!=1){
            System.out.println("Type error");
            System.exit(0);
         }
      }

      if(arguments==null){
         return (String)argumentsList.get(0);
      }

      if(arguments.size()+1 != len)
      {
         System.out.println("Type error");
         System.exit(0);
      }

      for(int i=1;i<len;i++){
         if(!cmpAcceptability((String)argumentsList.get(i),(String)arguments.get(i-1)))
         {
               System.out.println("Type error");
               System.exit(0);
         }
      }
      return (String)argumentsList.get(0);
   }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;

      //System.out.println("Program started successfully");
      GlobalSymbolTable = (HashMap<String,SymbolTable>)argu;
      argu = null; 

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      //System.out.println("Program execution completed.. for verification");
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;

      n.f0.accept(this, argu);

      String className = (String)n.f1.accept(this, argu);
      argu = (A)GlobalSymbolTable.get(className);

      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);

      argu = (A)(((SymbolTable)argu).childInfo.get((String)"main"));

      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      String className = (String)n.f1.accept(this, argu);
      A tmp = (A)GlobalSymbolTable.get(className);

      n.f2.accept(this, tmp);
      n.f3.accept(this, tmp);
      n.f4.accept(this, tmp);
      n.f5.accept(this, tmp);

      return _ret;
   }

   public void checkExtension(SymbolTable a){

      if(GlobalSymbolTable.get(a.parent)==null)
      {
         System.out.println("Type error");
         System.exit(0);
      }

      String extensionClass = a.parent;
      while(extensionClass!=null && GlobalSymbolTable.get(extensionClass)!=null)
      {
         SymbolTable tmp = GlobalSymbolTable.get(extensionClass);
         if(a == tmp)
         {
            System.out.println("Type error");
            System.exit(0);
         }
         extensionClass = tmp.parent;
      }
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      String className =  (String)n.f1.accept(this, argu);
      SymbolTable tmp = GlobalSymbolTable.get(className);

      checkExtension(tmp);

      argu = (A)tmp;

      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }


   public void cmpIdentifier1(SymbolTable a,String functionName){
      
      SymbolTable temporary = a;
      LinkedList<R> listOfArguments = temporary.Functions.get(functionName);
      String tmp = a.parent;
      
      int length = listOfArguments.size();
      while(tmp!=null && GlobalSymbolTable.get(tmp)!=null)
      {
         temporary = GlobalSymbolTable.get(tmp);
         LinkedList<R> pro=temporary.Functions.get(functionName);

         if(pro!=null)
         {

            if(pro.size() != length)
            {
               System.out.println("Type error");
               System.exit(0);
            }

            if(!cmpAcceptability((String)listOfArguments.get(0),(String)pro.get(0)))
            {
                System.out.println("Type error");
                System.exit(0);
            }

            for(int i=1 ; i<length ; i++)
            {
               if(!((String)pro.get(i)).equals((String)listOfArguments.get(i)))
               {
                  System.out.println("Type error");
                  System.exit(0);
               }
            }
            
         }
         tmp = temporary.parent;
      }
   }

   public void cmpIdentifier(String functionName,SymbolTable tmp){
      for(Map.Entry<String,SymbolTable> iter : GlobalSymbolTable.entrySet())
      {
         if(iter.getValue() == (SymbolTable)tmp)
         {
            if(functionName.equals(iter.getKey()))
            {
               System.out.println("Type error");
               System.exit(0);
            }
         }
      }
   }

   /**
    * f0 -> AccessType()
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String functionName = (String)n.f2.accept(this, argu);
      SymbolTable functionInfo = ((SymbolTable)argu).childInfo.get(functionName);
      
      cmpIdentifier(functionName,(SymbolTable)argu);


      cmpIdentifier1((SymbolTable)argu,functionName);

      n.f3.accept(this, (A)functionInfo);
      n.f4.accept(this, (A)functionInfo);
      n.f5.accept(this, (A)functionInfo);
      n.f6.accept(this, (A)functionInfo);
      n.f7.accept(this, (A)functionInfo);
      n.f8.accept(this, (A)functionInfo);
      n.f9.accept(this, (A)functionInfo);
      n.f10.accept(this, (A)functionInfo);
      n.f11.accept(this, (A)functionInfo);
      n.f12.accept(this, (A)functionInfo);
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;

      String dataType = (String)n.f0.accept(this, argu);

      boolean ok = false;
      if(n.f0.which==3)
      {
         for(Map.Entry<String,SymbolTable> iter : GlobalSymbolTable.entrySet())
         {
               if(dataType.equals(iter.getKey())){
                  ok = true;
                  break;
               }
         }
         if(!ok)
         {
            System.out.println("Type error");
            System.exit(0);
         }
      }

      return (R) dataType;
   }

   /**
    * f0 -> PublicType()
    *       | PrivateType()
    *       | ProtectedType()
    */
   public R visit(AccessType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    */
   public R visit(PublicType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "private"
    */
   public R visit(PrivateType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "protected"
    */
   public R visit(ProtectedType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   public String IdentifierType(String id, SymbolTable tmp)
   {
       if(tmp==null)
       {
           System.out.println("Type error");
           System.exit(0);
       }
       if(tmp.fields.get(id)!=null){
           return tmp.fields.get(id);
       }
       return IdentifierType(id,GlobalSymbolTable.get(tmp.parent));
    }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }


   public boolean cmpAcceptability(String a,String b)
   {
        if(a.equals(b)){
            return true;
        }
        SymbolTable tmp = GlobalSymbolTable.get(b);
        while(tmp!=null)
        {
            if(a.equals(tmp.parent)){
                return true;
            }
            tmp = GlobalSymbolTable.get(tmp.parent);
         }
        return false;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;

      String id = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String expression = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      if(!cmpAcceptability(IdentifierType(id,(SymbolTable)argu),expression))
      {
         System.out.println("Type error");
         System.exit(0);
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      String id = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String tmp1 = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String tmp2 = (String)n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      if(!(IdentifierType(id,(SymbolTable)argu).equals("int[]")))
      {
        System.out.println("Type error");
        System.exit(0);
      }
      if(!tmp1.equals("int")){
         System.out.println("Type error");
         System.exit(0);
      }
      if(!tmp2.equals("int")){
         System.out.println("Type error");
         System.exit(0);
      }
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String expression = (String)n.f2.accept(this, argu);

      if(!expression.equals("boolean"))
      {
        System.out.println("Type error");
        System.exit(0);
      }

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      String expression = (String)n.f2.accept(this, argu);

      if(!expression.equals("boolean"))
      {
        System.out.println("Type error");
        System.exit(0);
      }

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      String expression = (String)n.f2.accept(this, argu);
      if(!expression.equals("boolean"))
      {
        System.out.println("Type error");
        System.exit(0);
      }

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      String expression = (String)n.f2.accept(this, argu);

      if(!expression.equals("int"))
      {
        System.out.println("Type error");
        System.exit(0);
      }

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | TernaryExpression()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      String tmp1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String tmp2 = (String)n.f2.accept(this, argu);
      if(!(tmp1.equals("boolean")))
      {
        System.out.println("Type error");
        System.exit(0);
      }
      if(!tmp2.equals("boolean")){
         System.out.println("Type error");
         System.exit(0);
      }
      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      String tmp1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String tmp2 = (String)n.f2.accept(this, argu);
      if(!(tmp1.equals("boolean")))
      {
        System.out.println("Type error");
        System.exit(0);
      }
      if(!tmp2.equals("boolean")){
         System.out.println("Type error");
         System.exit(0);
      }
      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      String tmp1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String tmp2 = (String)n.f2.accept(this, argu);
      if(!(tmp1.equals("int")))
      {
        System.out.println("Type error");
        System.exit(0);
      }
      if(!tmp2.equals("int")){
         System.out.println("Type error");
         System.exit(0);
      }
      return (R)"boolean";
   }

   public void cmpEquality(String a,String b){
      if(a.equals(b)){
         return;
      }
      SymbolTable tmp = GlobalSymbolTable.get(b);
      while(tmp!=null)
      {
            if(a.equals(tmp.parent)){
                return ;
            }
            tmp = GlobalSymbolTable.get(tmp.parent);
      }
      tmp = GlobalSymbolTable.get(a);
      while(tmp!=null)
      {
            if(b.equals(tmp.parent)){
                return ;
            }
            tmp = GlobalSymbolTable.get(tmp.parent);
      }
      System.out.println("Type error");
      System.exit(0);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      String tmp1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String tmp2 = (String)n.f2.accept(this, argu);

      cmpEquality(tmp1,tmp2);

      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      String tmp1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String tmp2 = (String)n.f2.accept(this, argu);
      if(!(tmp1.equals("int")))
      {
        System.out.println("Type error");
        System.exit(0);
      }
      if(!tmp2.equals("int")){
         System.out.println("Type error");
         System.exit(0);
      }
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      String tmp1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String tmp2 = (String)n.f2.accept(this, argu);
      if(!(tmp1.equals("int")))
      {
        System.out.println("Type error");
        System.exit(0);
      }
      if(!tmp2.equals("int")){
         System.out.println("Type error");
         System.exit(0);
      }
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      String tmp1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String tmp2 = (String)n.f2.accept(this, argu);
      if(!(tmp1.equals("int")))
      {
        System.out.println("Type error");
        System.exit(0);
      }
      if(!tmp2.equals("int")){
         System.out.println("Type error");
         System.exit(0);
      }
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      String tmp1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String tmp2 = (String)n.f2.accept(this, argu);
      if(!(tmp1.equals("int")))
      {
        System.out.println("Type error");
        System.exit(0);
      }
      if(!tmp2.equals("int")){
         System.out.println("Type error");
         System.exit(0);
      }
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      String tmp1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String tmp2 = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      if(!(tmp2.equals("int")))
      {
        System.out.println("Type error");
        System.exit(0);
      }
      if(!tmp1.equals("int[]"))
      {
        System.out.println("Type error");
        System.exit(0);
      }
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;

      String tmp = (String)n.f0.accept(this, argu);

      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      if(!tmp.equals("int[]"))
      {
        System.out.println("Type error");
        System.exit(0);
      }
      return (R)"int";
   }

   public void checkAccessType(SymbolTable a,String scope,String functionName){
       if(a.childInfo.get(functionName)!=null){
            String functionScope = a.childInfo.get(functionName).parent;
            if(a.childInfo.get(functionName).accessTypes.equals("protected"))
            {
                  boolean ok = false;
                  while(scope!=null)
                  {
                     if(scope.equals(functionScope))
                     {
                        ok = true;
                        break;
                     }
                     scope = GlobalSymbolTable.get(scope).parent;
                  }
                  if(!ok)
                  {
                     System.out.println("Type error");
                     System.exit(0);
                  }
            }
            else if(a.childInfo.get(functionName).accessTypes.equals("private"))
            { 
               if(!scope.equals(functionScope)){
                  System.out.println("Type error");
                  System.exit(0);
               }
            }
      }
   }


   public String scopeFunction(SymbolTable a){
      String tmp = null;
      Set<String> keys=GlobalSymbolTable.keySet();
      for (String s: keys)
      {
        if(GlobalSymbolTable.get(s)==a){
               return s;
         }
        SymbolTable t = GlobalSymbolTable.get(s);
        Set<String> name = t.childInfo.keySet();
        for(String b: name){
            if(t.childInfo.get(b)==a){
               return s;
            }
         }
      }
      return tmp;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;

      String className = (String)n.f0.accept(this, argu);

      n.f1.accept(this, argu);

      String functionName = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      LinkedList<R> arguments = (LinkedList<R>)n.f4.accept(this, argu);
      n.f5.accept(this, argu);

      if(GlobalSymbolTable.get(className)==null)
      {
        System.out.println("Type error");
        System.exit(0);
      }

      String ans = scopeFunction((SymbolTable)argu);
      _ret = (R)returnTypeOfFunction(functionName,arguments,GlobalSymbolTable.get(className),ans);

      return _ret;
   }

   public String LCA(String a,String b){
      if(a.equals(b)){
         return a;
      }
      SymbolTable tmp1 = GlobalSymbolTable.get(b);
      while(tmp1!=null)
      {
            if(a.equals(tmp1.parent)){
                return a;
            }
            tmp1 = GlobalSymbolTable.get(tmp1.parent);
      }
      SymbolTable pro = GlobalSymbolTable.get(a);
      while(pro!=null){
         if((pro.parent).equals(b)){
            return b;
         }
         SymbolTable tmp = GlobalSymbolTable.get(b);
         while(tmp != null){
            if((pro.parent).equals(tmp.parent)){
               return tmp.parent;
            }
            tmp = GlobalSymbolTable.get(tmp.parent);
         }
         pro = GlobalSymbolTable.get(pro.parent);
      }
      System.out.println("Type error");
      System.exit(0);
      return "NOMATCH";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "?"
    * f2 -> PrimaryExpression()
    * f3 -> ":"
    * f4 -> PrimaryExpression()
    */
   public R visit(TernaryExpression n, A argu) {
      R _ret=null;
      String tmp1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String tmp2 = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String tmp3 = (String)n.f4.accept(this, argu);
      if(!(tmp1.equals("boolean")))
      {
         System.out.println("Type error");
         System.exit(0); 
      }
      String ans = LCA(tmp2,tmp3);
      return (R)ans;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;

      R expression = n.f0.accept(this, argu);
      R expressionList = n.f1.accept(this, argu);

      if(expressionList == null){
         expressionList = (R) new LinkedList<R>();
      }
      if(expression == null){
         return expressionList;
      }
      else{
         ((LinkedList<R>) expressionList).addFirst(expression);
         return (R)expressionList;
      }
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      _ret = n.f1.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);

      SymbolTable tmp = (SymbolTable)argu;
      if(n.f0.which==3){
            return (R)IdentifierType((String)_ret,tmp);
      }
        
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      return (R)"int";
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      return (R)"boolean";
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      return (R)"boolean";
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      return (R) n.f0.toString();
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;

      n.f0.accept(this, argu);

      SymbolTable tmp = (SymbolTable)argu;
      Set<String> className=GlobalSymbolTable.keySet();
      for (String s: className){
        if(GlobalSymbolTable.get(s)==tmp){
            return (R)s;
        }
        SymbolTable t=GlobalSymbolTable.get(s);
        Set<String> functionName=t.childInfo.keySet();
        for(String b: functionName){
            if(t.childInfo.get(b)==tmp){
                return (R)s;
            }
         }
      }
      //This has no matching print error..
      System.out.println("Type error");
      System.exit(0);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      String id=(String)n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(!id.equals("int")){
         System.out.println("Type error");
         System.exit(0);
      }

      return (R)"int[]";
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;

      n.f0.accept(this, argu);

      String id=(String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      if(GlobalSymbolTable.get(id)==null)
      {
        System.out.println("Type error");
        System.exit(0);
      }
      return (R)id;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;

      n.f0.accept(this, argu);
      String exp=(String)n.f1.accept(this, argu);

      if(!exp.equals("boolean"))
      {
          System.out.println("Type error");
          System.exit(0);
      }
      return (R)"boolean";
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      _ret=n.f1.accept(this, argu);

      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;

      R id = n.f0.accept(this, argu);
      R idList = n.f1.accept(this, argu);

      if(idList == null){
         idList = (R) new LinkedList<R>();
      }
      if(id == null){
         return idList;
      }
      else{
            ((LinkedList<R>) idList).addFirst(id);
            return (R)idList;
      }
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      _ret=n.f1.accept(this, argu);
      return _ret;
   }

}
