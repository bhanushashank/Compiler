//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class Codegeneration<R,A> implements GJVisitor<R,A> {

   int[] a = new int[3];
   String ansToPrint = "";
   String printChecker = "";

   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() ){
         String l = (String)n.node.accept(this,argu);
         if(l!=null) {
             ansToPrint += "\n";
             ansToPrint += l;
             ansToPrint += ":\n";
         }

         printChecker += l;

         return (R)l;
      }
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   String spillargvariable = "";
   String expressionVariable = "";
   String opcodeVariable = "";
   boolean UsedforChecking = false;
   String storage = "";
   Integer caseidentifier = -1;
   Integer NumberOfFunctions = 0;

   HashMap <Integer,String> RegistersMap = new HashMap<Integer,String> ();
   HashMap <Integer,String> OperatorMap = new HashMap<Integer,String> ();

    /*"a0" - 0
    *       | "a1" - 1
    *       | "a2" - 2
    *       | "a3" - 3
    *       | "t0" - 4
    *       | "t1" - 5
    *       | "t2" - 6
    *       | "t3" - 7 
    *       | "t4" - 8
    *       | "t5" - 9
    *       | "t6" - 10
    *       | "t7" - 11
    *       | "s0" - 12
    *       | "s1" - 13
    *       | "s2" - 14
    *       | "s3" - 15
    *       | "s4" - 16
    *       | "s5" - 17
    *       | "s6" - 18
    *       | "s7" - 19
    *       | "t8" - 20
    *       | "t9" - 21
    *       | "v0" - 22
    *       | "v1" - 23
    */

   void createRegisters(){
       int count = 0;
       for(int i=0;i<=3;i++){
          RegistersMap.put(count,"a"+i);
          count++;
       }
       for(int i=0;i<=7;i++){
          RegistersMap.put(count,"t"+i);
          count++;
       }
       for(int i=0;i<=7;i++){
          RegistersMap.put(count,"s"+i);
          count++;
       }
       RegistersMap.put(count++,"t8");
       RegistersMap.put(count++,"t9");
       for(int i=0;i<=1;i++){
         RegistersMap.put(count,"v"+i);
         count++;
       }
   }

   void CreateOperator(){
       OperatorMap.put(0,"sle ");
       OperatorMap.put(1,"sne ");
       OperatorMap.put(2,"add ");
       OperatorMap.put(3,"sub ");
       OperatorMap.put(4,"mul ");
       OperatorMap.put(5,"div ");
   }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) {

      createRegisters();

      CreateOperator();

      R _ret=null;
      
      String temp1 = (String)n.f2.accept(this, argu);
      printChecker += temp1;

      String temp2 = (String) n.f5.accept(this, argu);
      printChecker += temp2;

      String temp3 = (String)n.f8.accept(this, argu);

      printChecker += temp3;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      n.f3.accept(this, argu);

      printChecker += "MAIN";


      n.f4.accept(this, argu);
      n.f6.accept(this, argu);

      printChecker += a[0];
      printChecker += "\n"+a[1];
      printChecker += "\n"+a[2];


      a[0] = Integer.parseInt(temp1);
      a[1] = Integer.parseInt(temp2);
      a[2] = Integer.parseInt(temp3);


      n.f7.accept(this, argu);
      n.f9.accept(this, argu);

      int cal = (a[2]);
      cal -= 4;
      cal *= 4;
      cal += 4;

      int temp = Math.max(4,cal);

      ansToPrint += "\t.text\n";
      ansToPrint += ".globl\tmain\n";
      ansToPrint += "main:\n move $fp, $sp\n";
      ansToPrint += "subu $sp, $sp, "+temp+"\n";
      ansToPrint += "sw $ra, -4($fp)\n";
              
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);

      ansToPrint += "\n lw $ra, -4($fp)\n";
      ansToPrint += "addu $sp, $sp, "+temp+"\n";
      ansToPrint += "jal _exitret\n\n\n";

      String ans = (String)n.f12.accept(this, argu);
      if(ans == "SPILLed"){
         System.out.println("//SPILLED");
      }

      n.f13.accept(this, argu);

      ansToPrint += ".text\n";
      ansToPrint += ".globl _halloc\n";
      ansToPrint += "_halloc:\n";
      ansToPrint += "li $v0, 9\n";
      ansToPrint += "syscall\n";
      ansToPrint += "jr $ra\n\n";
      ansToPrint += ".text\n";
      ansToPrint += ".globl _error\n";
      ansToPrint += "_error:\n";
      ansToPrint += "li $v0, 4\n";
      ansToPrint += "syscall\n";
      ansToPrint += "li $v0, 10\n";
      ansToPrint += "syscall\n";
      ansToPrint += "\n\n";
      ansToPrint += ".text\n";
      ansToPrint += ".globl _print\n";
      ansToPrint += "_print:\n";
      ansToPrint += "li $v0, 1\n";
      ansToPrint += "syscall\n";
      ansToPrint += "la $a0, newline\n";
      ansToPrint += "li $v0, 4\n";
      ansToPrint += "syscall\n";
      ansToPrint += "jr $ra\n\n";
      ansToPrint += ".text\n";
      ansToPrint += ".globl _exitret\n";
      ansToPrint += " _exitret:\n";
      ansToPrint += "li $v0, 10\n";
      ansToPrint += "syscall\n";
      ansToPrint += ".data\n";
      ansToPrint += ".align 0\n";
      ansToPrint += "newline:    .asciiz \"\\n\" \n\n";
      ansToPrint += ".data\n";
      ansToPrint += ".align 0\n";
      ansToPrint += "str_er:  .asciiz \" ERROR: abnormal termination\\n\" \n";

      System.out.println(ansToPrint);
      //System.out.println(printChecker);

      n.f14.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      UsedforChecking = false;
      NumberOfFunctions ++;
      //System.out.println(NumberOfFunctions);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n, A argu) {
      R _ret = null;
 
      NumberOfFunctions ++;
      n.f1.accept(this, argu);

      String pro1 = (String)n.f2.accept(this, argu);
 
      printChecker += pro1;

      String pro2 = (String)n.f5.accept(this, argu);
 
      printChecker += pro2;

      String pro3 = (String)n.f8.accept(this, argu);


      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f9.accept(this, argu);

      printChecker += pro3;

      int temp1 = Integer.parseInt(pro1);
      int temp2 = Integer.parseInt(pro2);
      int temp3 = Integer.parseInt(pro3);


      a[0] = temp1;
      a[1] = temp2;
      a[2] = temp3;

      String currentRunningFunction = (String)n.f0.accept(this, argu);

      ansToPrint += "\t .text \n ";
      ansToPrint += "\t .globl \t ";
      ansToPrint += currentRunningFunction;
      ansToPrint += "\n";
      ansToPrint += currentRunningFunction;
      ansToPrint += ":\n";

      int cal = (temp3);
      cal -= 4;

      int temp = Math.max(0,cal*4);

      temp += (temp2)*4;
      temp += 8;

      ansToPrint += "sw $fp, -8($sp) \n";
      ansToPrint += "move $fp, $sp \n";
      ansToPrint += "subu $sp, $sp, "+temp+"\n";
      ansToPrint += "sw $ra, -4($fp)"+"\n";

      n.f10.accept(this, argu);

      ansToPrint += "lw $ra, -4($fp) \n";
      ansToPrint += "lw $fp, "+(temp-8)+"($sp) \n";
      ansToPrint += "addu $sp, $sp, "+temp+"\n";
      ansToPrint += "jr $ra \n \n";


      n.f11.accept(this, argu);
      String ans = (String)n.f12.accept(this,argu);
      if(ans == "SPILLed"){
         printChecker += "//SPILLED";
      }
      else{
         printChecker += "//NOT SPILLED";
      }

      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      int pro = n.f0.which;
      if(pro == 11){
          int temp = Math.max((a[0]-4),0);
          temp *= 4;
          temp += 4;
          if(UsedforChecking){
            printChecker += temp;
          }
      }
      else if(pro == 12){
          int hi = Math.max((a[2]),0);
          printChecker += hi;
      }
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
       R _ret=null;
      n.f0.accept(this, argu);
      ansToPrint += "nop\n";
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      ansToPrint += "li $v0 4\n";
      ansToPrint += "la $a0, str_er\n";
      ansToPrint += "syscall\n ";
      ansToPrint += "li $v0, 10\n";
      ansToPrint += "syscall\n";

      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
 
      ansToPrint += "bne $";
      ansToPrint += (String)n.f1.accept(this,argu);
      ansToPrint += ", 1, ";
      ansToPrint += (String)n.f2.accept(this,argu);
      ansToPrint += "\n";

      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      ansToPrint += "b ";
      ansToPrint += (String)n.f1.accept(this,argu);
      ansToPrint += "\n";

      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      ansToPrint += "sw $";
      ansToPrint += (String)n.f3.accept(this,argu);
      ansToPrint += ", ";
      ansToPrint += (String)n.f2.accept(this,argu);
      ansToPrint += "($";
      ansToPrint += (String)n.f1.accept(this,argu);
      ansToPrint += ")\n";

      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      ansToPrint += "lw $";
      ansToPrint += (String)n.f1.accept(this,argu);
      ansToPrint += ", ";
      ansToPrint += (String)n.f3.accept(this,argu);
      ansToPrint += "($";
      ansToPrint += (String)n.f2.accept(this,argu);
      ansToPrint += ")\n";

      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      expressionVariable = (String)n.f1.accept(this,argu);

      n.f2.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
 
      printChecker += "PRINT";
      printChecker += " "+expressionVariable;

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      if(caseidentifier == 0){
         ansToPrint += "move $a0 $";
         ansToPrint += storage+"\n";
      }
      else if(caseidentifier == 1){
         ansToPrint += "li $a0 ";
         ansToPrint += storage+"\n";

      }else if(caseidentifier == 2){
         ansToPrint += "la $a0 ";
         ansToPrint += storage+"\n";
      }

      ansToPrint += "jal _print \n";

      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      ansToPrint += "lw $";
      ansToPrint += (String)n.f1.accept(this,argu);
      ansToPrint += ", ";
      n.f2.accept(this,argu);
      ansToPrint += spillargvariable;
      ansToPrint += "\n";

      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
 
      ansToPrint += "sw $";
      ansToPrint += (String)n.f2.accept(this,argu);
      ansToPrint += ", ";
      n.f1.accept(this,argu);
      ansToPrint += spillargvariable;
      ansToPrint += "\n";

      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String pro = (String)n.f1.accept(this, argu);
      int temp = Integer.parseInt(pro);

      temp--;
      temp *= 4;

      ansToPrint += "sw $";
      ansToPrint += (String)n.f2.accept(this,argu);
      ansToPrint += ", ";
      ansToPrint += temp;
      ansToPrint += "($sp)\n";

      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) {
      R _ret=null;
 
      printChecker += "CALL ";
      printChecker += storage;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      if(caseidentifier==0){
        ansToPrint += "jalr $"+storage+"\n";
      }
      else if(caseidentifier==2){
        ansToPrint += "jal "+storage+"\n";
      }

      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      if(n.f0.which==2){
        if(caseidentifier == 0){
           ansToPrint += "move $";
           ansToPrint += expressionVariable;
           ansToPrint += " $"+storage+"\n";
        }
        else if(caseidentifier == 1){
           ansToPrint += "li $";
           ansToPrint += expressionVariable;
           ansToPrint += " "+storage+"\n";
        }
        else if(caseidentifier == 2){
           ansToPrint += "la $";
           ansToPrint += expressionVariable;
           ansToPrint += " "+storage+"\n";
        }
      }

      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret = null;

      printChecker += "HAllOCATE";

      n.f0.accept(this, argu);

      n.f1.accept(this, argu);

      if(caseidentifier == 0){
        ansToPrint += "move $a0 $"+storage+"\n";
        ansToPrint += "jal _halloc \n";
        ansToPrint += "move $"+expressionVariable+" $v0"+"\n";
      }
      else if(caseidentifier == 1){
        ansToPrint += "li $a0 "+storage+"\n";
        ansToPrint += "jal _halloc \n";
        ansToPrint += "move $"+expressionVariable+" $v0"+"\n";
      }

      caseidentifier = -1;

      return _ret;

   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;

      n.f0.accept(this,argu);

      String opcode = opcodeVariable;

      String reg = (String)n.f1.accept(this, argu);

      n.f2.accept(this, argu);


      if(caseidentifier == 0){
         ansToPrint += opcode+" $"+expressionVariable+", $"+reg+", $"+storage+"\n";
      }
      else if(caseidentifier==1){
          ansToPrint += opcode+" $"+expressionVariable+", $"+reg+", "+storage+"\n";
      }
 
      caseidentifier = -1;

      return _ret;


   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      opcodeVariable = OperatorMap.get(n.f0.which);
      return _ret;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);

      String hi = (String)n.f1.accept(this, argu);
      int cal = Integer.parseInt(hi);

      int temp = 0;
      if(4<a[0]){
        temp = Math.max((a[0]-4),0);
        if(temp>cal){
           spillargvariable = " ";
           spillargvariable += (cal*4);
           spillargvariable += "($fp) ";
           return _ret;
        }
      }

      cal -= temp;
      cal += Math.max(0,(a[2]-4));
      cal *= 4;

      spillargvariable = " ";
      spillargvariable += cal;
      spillargvariable += "($sp) ";
 
      return _ret;

   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;

      storage = (String)n.f0.accept(this, argu);

      caseidentifier = n.f0.which;

      return _ret;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)RegistersMap.get(n.f0.which);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String ans = n.f0.toString();
      
      printChecker += ans; 

      return (R)ans;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
       R _ret=null;
      n.f0.accept(this, argu);
      String ans = n.f0.toString();
      printChecker += ans;
 
      NumberOfFunctions ++;

      return (R) ans;
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n, A argu) {
      
      printChecker += "HI CHECKING SPILLED CHECKING";
       
      R _ret=null;
      n.f0.accept(this, argu);

      String ans = (String)n.f1.accept(this, argu);
      printChecker += ans;

      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String ans = n.f0.toString();
      return (R)ans;
   }

}
